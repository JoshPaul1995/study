2022.3.30

#用type()来创建class#
传统的类的用法,需要先创建一个类,保存成一个.py文件,再from ... import ...才能使用,而type()可以直接动态创建。
要创建一个class对象，type()函数依次传入3个参数：
1、class的名称；
2、继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；
3、class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。
通过type()函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class。

正常情况下，我们都用class Xxx...来定义类，但是，type()函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类
这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。

范例:
def fn(self, name='world'): # 先定义函数
    print('Hello, %s.' % name)

Hello = type('Hello', (object,), dict(hello=fn)) # 创建Hello class




#元类
在python中,“定义”一个类的操作为class Student(object):
                               pass
而“创建”一个类，则需要用到元类,操作如下:

#metaclass是类的模板,所以必须从'type'派生
class ListMetaclass(type):
    def __new__(cls,name,bases,attrs):
        attrs['add'] = lambda self,value:self.append(value)
        return type.__new__(cls,name,bases,attrs)
有了ListMetaclass,定义类的时候还要指示使用ListMetaclass来定制类,传入关键字参数metaclass:

class Mylist(list,metaclass=ListMetaclass):
    pass

当传入关键字参数metaclass,它指示Python解释器在创建Mylist时,要 通过ListMetaclass.__new__()来创建,在此,我们可以修改类的定义,比如加上新的方法,然后返回修改
的定义。

__new__()方法接收到的参数依次是:
1、当前准备创建的类的对象;
2、类的名字;
3、类继承的父类集合;
4、类的方法集合。

测试发现,Mylist可以调用add()方法,原本add方法只能用在可哈希的对象上,list和dict都不能使用
>>> L = MyList()
>>> L.add(1)
>> L
[1]
结果显示Mylist可以使用add()方法

而普通的list则无法使用add()方法:
>>> L2 = list()
>>> L2.add(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'add'


元类创建的类可以动态修改类的定义(如加上一些新的方法),而定义一个类在定义时它的方法就是固定的。
元类Metaclass主要用在ORM框架上，ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表
。这样，写代码更简单，不用直接操作SQL语句。要编写一个ORM框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。





2022.4.4

SQL提供如下聚合函数：
函数	说明
COUNT 计算行数,可以设定条件,如SELECT COUNT(*) boys FROM students WHERE gender = 'M';
SUM	计算某一列的合计值，该列必须为数值类型
AVG	计算某一列的平均值，该列必须为数值类型
MAX	计算某一列的最大值
MIN	计算某一列的最小值


“分组聚合”功能:
在语句后加上GROUP BY:
SELECT COUNT(*) num FROM students GROUP BY class_id;
即可以将所聚合的数据按分组class_id来分组显示.


SQL的'WHERE'常用作筛选所返回的数据;


笛卡尔查询会产生大量的重复数据,使用INNER JOIN可以将对应的数据连接起来:
SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score
FROM students s
INNER JOIN classes c
ON s.class_id = c.id;

INNER JOIN查询的写法是：
1、先确定主表，仍然使用FROM <表1>的语法；
2、再确定需要连接的表，使用INNER JOIN <表2>的语法；
3、然后确定连接条件，使用ON <条件...>，这里的条件是s.class_id = c.id，表示students表的class_id列与classes表的id列相同的行需要连接；
4、可选：加上WHERE子句、ORDER BY等子句。
使用别名不是必须的，但可以更好地简化查询语句。






